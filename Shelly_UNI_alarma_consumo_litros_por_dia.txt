let CONFIG = {
  counterId: 2,               // input:2 es el contador
  switchId: 0,                // switch:0 o switch:1 seg√∫n conexi√≥n
  volumeThresholdLitros: 2000, // ‚úÖ Umbral en litros
  litrosPorPulso: 0.002525,     // YF-B5: 1 pulso = 0.002525 litros
  notifyMessage: "üîî Umbral diario de agua superado",
  autoOffSeconds: 10,
  snapshotHour: 0,
  snapshotMinute: 0,
  timezoneOffset: 2 * 3600    // UTC+2 (verano); cambia a 1*3600 en invierno
};

let dailyStartCount = null;

// üëâ Captura el valor actual al arrancar el script
Shelly.call("Input.GetStatus", { id: CONFIG.counterId }, function (res, ec, em) {
  if (ec) {
    print("‚ùå Error al obtener el contador inicial:", em);
    return;
  }
  dailyStartCount = res.counts.total;
  print("üìå Valor inicial registrado al arrancar:", dailyStartCount);
});

Shelly.addStatusHandler(function (status) {
  if (status.component === "input:" + CONFIG.counterId && status.delta && status.delta.counts) {
    let pulseCount = status.delta.counts.total;
    print("üìà Pulsos contados:", pulseCount);

    if (dailyStartCount === null) {
      print("‚è≥ A√∫n no se ha capturado dailyStartCount");
      return;
    }

    let incrementoPulsos = pulseCount - dailyStartCount;
    let litrosConsumidos = incrementoPulsos * CONFIG.litrosPorPulso;

    print("üìä Litros desde inicio:", litrosConsumidos.toFixed(2));

    if (litrosConsumidos >= CONFIG.volumeThresholdLitros) {
      print("üîî Umbral de litros alcanzado:", CONFIG.volumeThresholdLitros, "L");

      Shelly.emitEvent("umbral_agua_superado", {
        mensaje: CONFIG.notifyMessage,
        litros: litrosConsumidos,
        umbral: CONFIG.volumeThresholdLitros,
        timestamp: Shelly.getComponentStatus("sys").unixtime
      });

      Shelly.call("switch.set", { id: CONFIG.switchId, on: true });
      print("‚ö° Salida activada");

      Timer.set(CONFIG.autoOffSeconds * 1000, false, function () {
        Shelly.call("switch.set", { id: CONFIG.switchId, on: false });
        print("‚è±Ô∏è Salida desactivada tras", CONFIG.autoOffSeconds, "segundos");
      });
    }
  }
});

// üïõ Programar snapshot a las 00:00 para el d√≠a siguiente
function scheduleDailySnapshot() {
  Shelly.call("Sys.GetStatus", {}, function (result, error_code, error_msg) {
    if (error_code || !result.unixtime) {
      print("‚ùå Error al obtener la hora del sistema:", error_msg);
      return;
    }

    let now = result.unixtime + CONFIG.timezoneOffset;
    let nowSecondsToday = now % 86400;
    let snapshotSeconds = CONFIG.snapshotHour * 3600 + CONFIG.snapshotMinute * 60;

    let waitSeconds = nowSecondsToday < snapshotSeconds
      ? snapshotSeconds - nowSecondsToday
      : 86400 - nowSecondsToday + snapshotSeconds;

    print("‚è≥ Segundos hasta la pr√≥xima snapshot (00:00):", waitSeconds);

    Timer.set(waitSeconds * 1000, false, function () {
      Shelly.call("Input.GetStatus", { id: CONFIG.counterId }, function (res, ec, em) {
        if (ec) {
          print("‚ùå Error al obtener el contador:", em);
          return;
        }
        dailyStartCount = res.counts.total;
        print("üìå Snapshot a las 00:00. Nuevo dailyStartCount:", dailyStartCount);
        scheduleDailySnapshot();  // Reprogramar para el d√≠a siguiente
      });
    });
  });
}

print("üöÄ Script iniciado. Monitoreando volumen desde arranque en input:" + CONFIG.counterId);
scheduleDailySnapshot();
